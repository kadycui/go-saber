package book

import (
	crand "crypto/rand"
	"fmt"
	"math/big"
	"math/rand"
	"strings"
	"time"
)

// RandomTimeStr randomTime 生成一个随机时间
func RandomTimeStr() string {
	// 获取当前时间
	now := time.Now()

	// 生成随机时间
	minDate := now.AddDate(-1, 0, 0) // 截至到今天一年前
	maxDate := now

	// 获取时间范围
	minUnix := minDate.Unix()
	maxUnix := maxDate.Unix()

	// 生成随机时间戳
	randUnix := rand.Int63n(maxUnix-minUnix) + minUnix

	// 转换为Time对象
	randomTime := time.Unix(randUnix, 0)

	// 格式化为字符串
	// randomTimeString := randomTime.Format("2006-01-02 15:04:05")
	randomTimeString := randomTime.Format("2006-01-02T15:04:05Z07:00")

	fmt.Println(randomTimeString)

	return randomTimeString
}

// Price 随机生成价格
func Price() float64 {
	// 创建独立的随机生成器
	// 使用当前时间作为种子
	seed := time.Now().UnixNano()
	random := rand.New(rand.NewSource(seed))

	// 生成随机浮点数
	randomFloat := random.Float64()*(200-50) + 50

	// 保留两位小数
	randomFloat = float64(int(randomFloat*100)) / 100

	fmt.Println(randomFloat)

	return randomFloat
}

// Category 随机生成分类id
func Category() int {
	// 创建一个新的随机源并设置种子
	source := rand.NewSource(time.Now().UnixNano())
	rng := rand.New(source)

	// 生成 1 到 10 之间的随机整数
	num := rng.Intn(10) + 1

	fmt.Println(num)
	return num
}

// Publish 随机生成出版社
func Publish() string {
	publishers := []string{
		"人民出版社",
		"中国青年出版社",
		"中国大百科全书出版社",
		"北京大学出版社",
		"上海译文出版社",
		"电子工业出版社",
		"机械工业出版社",
		"人民邮电出版社",
		"商务印书馆",
		"清华大学出版社",
	}

	randomSource := rand.NewSource(time.Now().UnixNano())
	randomGenerator := rand.New(randomSource)
	randomIndex := randomGenerator.Intn(len(publishers))
	randomPublisher := publishers[randomIndex]

	fmt.Println(randomPublisher)

	return randomPublisher

}

var adjectives = []string{
	"奇幻的", "悬疑的", "动人的", "刺激的", "感人的", "有趣的", "震撼的", "美丽的",
	"快乐的", "勇敢的", "聪明的", "幽默的", "浪漫的", "神秘的", "艰巨的", "温柔的",
	"真实的", "静谧的", "喧闹的", "深情的", "热情的", "怀旧的", "豪华的", "朴素的",
	"机智的", "专注的", "激动的", "和谐的", "稳定的", "疯狂的", "灵巧的", "舒适的",
	"独特的", "迷人的", "儒雅的", "大胆的", "轻松的", "谦虚的", "无私的", "谨慎的",
	"充满活力的", "坚韧的", "自信的", "慷慨的", "宽容的", "慎重的", "活泼的", "勤奋的",
	"勤劳的", "机敏的", "忠诚的", "虚心的", "聪慧的", "雄辩的", "淡定的", "自在的",
	"清秀的", "慈爱的", "纯真的", "机警的", "大气的", "高尚的", "率直的", "豁达的",
	"热心的", "博学的", "坦率的", "外向的", "内敛的", "亲切的", "率性的", "风趣的",
	"开朗的", "细腻的", "豪放的", "高傲的", "敏感的", "直率的", "害羞的", "灵活的",
	"朴实的", "富有创造力的", "严肃的", "诚实的", "公正的", "积极的", "负责任的", "强大的",
	"无畏的", "执着的", "舒缓的", "温和的", "严谨的", "机巧的", "热烈的", "冷静的",
	"忧郁的", "善良的", "笨拙的", "飘逸的", "迅猛的", "自由的", "恭敬的", "勇猛的",
	"焦虑的", "灵魂的", "多情的", "无辜的", "大方的", "淘气的", "单纯的", "自由散漫的",
	"有品味的", "忧伤的", "浪子的", "活力四溢的", "清爽的", "欢快的", "野性的", "开放的",
	"光明的", "疯狂的", "狡猾的", "智慧的", "冷酷的", "高大的", "贤明的", "矮小的",
	"魅力四溢的", "严肃的", "曲折的", "无拘束的", "轻快的", "稳妥的", "刚毅的", "威武的",
	"复杂的", "迷茫的", "茫然的", "拼搏的", "满足的", "平静的", "虚幻的", "宁静的",
	"神奇的", "火热的", "秘密的", "温馨的", "高雅的", "绝望的", "温暖的", "肆意的",
	"暴躁的", "宝贵的", "远大的", "平凡的", "谜一样的", "怀疑的", "恐怖的", "不可思议的",
	"宏伟的", "美好的", "高级的", "纯粹的", "卓越的", "调皮的", "轻柔的", "广阔的",
	"古老的", "青春的", "迷人的", "骄傲的", "伟大的", "忙碌的", "神圣的", "热烈的",
	"清新的", "危险的", "苗条的", "悲伤的", "优雅的", "重要的", "忘我的", "慈祥的",
}

var nouns = []string{
	"世界", "故事", "冒险", "秘密", "旅程", "谜团", "幸福", "梦想",
	"幻想", "诱惑", "咒语", "诅咒", "边缘", "力量", "审判", "智慧",
	"人生", "思考", "无限", "思维", "乐园", "困惑", "勇气", "潜力",
	"快乐", "幽灵", "幻影", "天空", "星辰", "风暴", "云朵", "奇迹",
	"宿命", "奇遇", "命运", "未来", "现实", "机遇", "救赎", "疯狂",
	"故土", "传说", "废墟", "城市", "浪漫", "青春", "天堂", "地狱",
	"痛苦", "胜利", "珍宝", "英雄", "传奇", "冥想", "光芒", "转折",
	"叛逆", "魔法", "魅力", "深渊", "寻找", "祭奠", "机密", "幸存",
	"黑暗", "财富", "忧愁", "谅解", "孤独", "牺牲", "挑战", "坚持",
	"希望", "生命", "玄机", "追求", "寻觅", "纷争", "心灵", "忏悔",
	"帝国", "核心", "逃离", "僵局", "猎人", "心跳", "诱陷", "组织",
	"勉强", "永恒", "压力", "邪恶", "繁荣", "腐败", "热爱", "挣扎",
	"领域", "幕后", "天地", "归来", "禁地", "探索", "释放", "破晓",
	"收获", "时间", "苦难", "悬念", "失落", "狡诈", "谎言", "尊严",
	"生存", "渴望", "幻觉", "离别",
}

// BookName 随机生成图书名
func BookName() string {
	randomSource := rand.NewSource(time.Now().UnixNano())
	randomGenerator := rand.New(randomSource)

	adjectiveIndex := randomGenerator.Intn(len(adjectives))
	nounIndex := randomGenerator.Intn(len(nouns))

	bookName := adjectives[adjectiveIndex] + nouns[nounIndex]
	fmt.Println(bookName)
	return bookName
}

var lastName = []string{
	"赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "褚", "卫", "蒋",
	"沈", "韩", "杨", "朱", "秦", "尤", "许", "何", "吕", "施", "张", "孔", "曹", "严", "华", "金", "魏",
	"陶", "姜", "戚", "谢", "邹", "喻", "柏", "水", "窦", "章", "云", "苏", "潘", "葛", "奚", "范", "彭",
	"郎", "鲁", "韦", "昌", "马", "苗", "凤", "花", "方", "任", "袁", "柳", "鲍", "史", "唐", "费", "薛",
	"雷", "贺", "倪", "汤", "滕", "殷", "罗", "毕", "郝", "安", "常", "傅", "卞", "齐", "元", "顾", "孟",
	"平", "黄", "穆", "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "狄", "米", "伏", "成", "戴", "谈",
	"宋", "茅", "庞", "熊", "纪", "舒", "屈", "项", "祝", "董", "梁", "杜", "阮", "蓝", "闵", "季", "贾",
	"路", "娄", "江", "童", "颜", "郭", "梅", "盛", "林", "钟", "徐", "邱", "骆", "高", "夏", "蔡", "田",
	"樊", "胡", "凌", "霍", "虞", "万", "支", "柯", "管", "卢", "莫", "柯", "房", "裘", "缪", "解", "应",
	"宗", "丁", "宣", "邓", "单", "杭", "洪", "包", "诸", "左", "石", "崔", "吉", "龚", "程", "嵇", "邢",
	"裴", "陆", "荣", "翁", "荀", "于", "惠", "甄", "曲", "封", "储", "仲", "伊", "宁", "仇", "甘", "武",
	"符", "刘", "景", "詹", "龙", "叶", "幸", "司", "黎", "溥", "印", "怀", "蒲", "邰", "从", "索", "赖",
	"卓", "屠", "池", "乔", "胥", "闻", "莘", "党", "翟", "谭", "贡", "劳", "逄", "姬", "申", "扶", "堵",
	"冉", "宰", "雍", "桑", "寿", "通", "燕", "浦", "尚", "农", "温", "别", "庄", "晏", "柴", "瞿", "阎",
	"连", "习", "容", "向", "古", "易", "廖", "庾", "终", "步", "都", "耿", "满", "弘", "匡", "国", "文",
	"寇", "广", "禄", "阙", "东", "欧", "利", "师", "巩", "聂", "关", "荆", "司马", "上官", "欧阳", "夏侯",
	"诸葛", "闻人", "东方", "赫连", "皇甫", "尉迟", "公羊", "澹台", "公冶", "宗政", "濮阳", "淳于", "单于",
	"太叔", "申屠", "公孙", "仲孙", "轩辕", "令狐", "徐离", "宇文", "长孙", "慕容", "司徒", "司空"}
var firstName = []string{
	"伟", "刚", "勇", "毅", "俊", "峰", "强", "军", "平", "保", "东", "文", "辉", "力", "明", "永", "健", "世", "广", "志", "义",
	"兴", "良", "海", "山", "仁", "波", "宁", "贵", "福", "生", "龙", "元", "全", "国", "胜", "学", "祥", "才", "发", "武", "新",
	"利", "清", "飞", "彬", "富", "顺", "信", "子", "杰", "涛", "昌", "成", "康", "星", "光", "天", "达", "安", "岩", "中", "茂",
	"进", "林", "有", "坚", "和", "彪", "博", "诚", "先", "敬", "震", "振", "壮", "会", "思", "群", "豪", "心", "邦", "承", "乐",
	"绍", "功", "松", "善", "厚", "庆", "磊", "民", "友", "裕", "河", "哲", "江", "超", "浩", "亮", "政", "谦", "亨", "奇", "固",
	"之", "轮", "翰", "朗", "伯", "宏", "言", "若", "鸣", "朋", "斌", "梁", "栋", "维", "启", "克", "伦", "翔", "旭", "鹏", "泽",
	"晨", "辰", "士", "以", "建", "家", "致", "树", "炎", "德", "行", "时", "泰", "盛", "雄", "琛", "钧", "冠", "策", "腾", "楠",
	"榕", "风", "航", "弘", "秀", "娟", "英", "华", "慧", "巧", "美", "娜", "静", "淑", "惠", "珠", "翠", "雅", "芝", "玉", "萍",
	"红", "娥", "玲", "芬", "芳", "燕", "彩", "春", "菊", "兰", "凤", "洁", "梅", "琳", "素", "云", "莲", "真", "环", "雪", "荣",
	"爱", "妹", "霞", "香", "月", "莺", "媛", "艳", "瑞", "凡", "佳", "嘉", "琼", "勤", "珍", "贞", "莉", "桂", "娣", "叶", "璧",
	"璐", "娅", "琦", "晶", "妍", "茜", "秋", "珊", "莎", "锦", "黛", "青", "倩", "婷", "姣", "婉", "娴", "瑾", "颖", "露", "瑶",
	"怡", "婵", "雁", "蓓", "纨", "仪", "荷", "丹", "蓉", "眉", "君", "琴", "蕊", "薇", "菁", "梦", "岚", "苑", "婕", "馨", "瑗",
	"琰", "韵", "融", "园", "艺", "咏", "卿", "聪", "澜", "纯", "毓", "悦", "昭", "冰", "爽", "琬", "茗", "羽", "希", "欣", "飘",
	"育", "滢", "馥", "筠", "柔", "竹", "霭", "凝", "晓", "欢", "霄", "枫", "芸", "菲", "寒", "伊", "亚", "宜", "可", "姬", "舒",
	"影", "荔", "枝", "丽", "阳", "妮", "宝", "贝", "初", "程", "梵", "罡", "恒", "鸿", "桦", "骅", "剑", "娇", "纪", "宽", "苛",
	"灵", "玛", "媚", "琪", "晴", "容", "睿", "烁", "堂", "唯", "威", "韦", "雯", "苇", "萱", "阅", "彦", "宇", "雨", "洋", "忠",
	"宗", "曼", "紫", "逸", "贤", "蝶", "菡", "绿", "蓝", "儿", "翠", "烟", "小", "轩"}

// GetFullName 随机生成姓名
func GetFullName() string {
	// seed := rand.NewSource(time.Now().UnixNano())
	// r := rand.New(seed)

	// lnIndex := r.Intn(len(lastName))

	// fnIndex := r.Intn(len(firstName))

	// fullName := lastName[lnIndex] + firstName[fnIndex]

	fullName := GetLastName() + GetFirstName()
	return fullName
}

func GetName() string {
	name := GetLastName() + GetFirstName()
	return name

}

func GetLastName() string {
	seed := rand.NewSource(time.Now().UnixNano())
	r := rand.New(seed)

	lnIndex := r.Intn(len(lastName))

	lastName := lastName[lnIndex]

	return lastName

}

func GetFirstName() string {
	numOfWords, err := crand.Int(crand.Reader, big.NewInt(2))
	if err != nil {
		fmt.Println("随机数生成失败：", err)
		return ""
	}

	num := int(numOfWords.Int64()) + 1

	selected := make([]string, num)
	for i := 0; i < num; i++ {
		index, err := crand.Int(crand.Reader, big.NewInt(int64(len(firstName))))
		if err != nil {
			fmt.Println("随机数生成失败：", err)
			return ""
		}
		selected[i] = firstName[index.Int64()]
	}
	firstName := strings.Join(selected, "")

	return firstName

}

// Rating 随机生成图书评级
func Rating() float64 {
	randomFloat := rand.Float64()*(10.0-1.0) + 1.0
	randomFloat = float64(int(randomFloat*10)) / 10.0 // 保留一位小数

	fmt.Println(randomFloat)
	return randomFloat
}
